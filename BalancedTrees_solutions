1)	SELF BALANCING TREES


/* Node is defined as :
typedef struct node
{
    int val;
    struct node* left;
    struct node* right;
    int ht;
} node; */

int ht(node* root){
    if(root){
        return 1+max(ht(root->left), ht(root->right));
    }
    return -1;
}

void updateHt(node* root){
    if(root){
        root->ht = 1 + max(ht(root->left), ht(root->right)); 
    }
}

node* rotateL(node* root){
    node* temp = root->right;
    node* t = temp->left;
    
    root->right = t;
    temp->left = root;
    
    updateHt(temp);
    updateHt(root);
    
    return temp;
}

node* rotateR(node* root){
    node* temp = root->left;
    
    root->left = temp->right;
    temp->right = root;
    
    updateHt(temp);
    updateHt(root);
    
    return temp;
}

node * insert(node * root,int val)
{
    // print(root);
    // cout << endl << endl;
   if(!root){
       root = new node;
       root->val = val;
       root->ht = 0;
       root->left = root->right = nullptr;
       return root;
   }
    if(root->val < val){
        root->right = insert(root->right, val);
    }
    else if(root->val > val){
        root->left = insert(root->left, val);
    }
    
    updateHt(root);
    
    int bal = ht(root->left) - ht(root->right);
    
    
    //RR
    if(bal <= -2 and val > root->right->val){
        root = rotateL(root);
    }
    
    //LL
    if(bal >= 2 and val < root->left->val){
        root = rotateR(root);
    }
    
    //RL
    if(bal <= -2 and val < root->right->val){
        root->right = rotateR(root->right);
        root = rotateL(root);
    }
    
    //LR
    if(bal >= 2 and val > root->left->val){
        root->left = rotateL(root->left);
        root = rotateR(root);
    }
  
    return root;
}


2)	 ARRAY AND SIMPLE QUERIES 
 #include<bits/stdc++.h>
using namespace std;
struct node
{
    int val,pri,siz;
    node *left,*right;
    node(int _val=-1)
    {
        val=_val;
        pri=rand();
        siz=1;
        left=NULL;
        right=NULL;
    }
};
typedef node* pnode;
struct node* root=NULL;
int size(pnode t)
{
    if(t) return t->siz;
    return 0;
}
void upd_sz(pnode t)
{
    if(t)
        t->siz=size(t->left)+size(t->right)+1;
}
void split(pnode t,pnode &l, pnode &r,int pos,int add=0)
{
    if(!t) {
        l=NULL;
        r=NULL;
        return;
    }
    int cur_pos=add+size(t->left)+1;
    if(cur_pos<=pos)
        split(t->right,t->right,r,pos,cur_pos),l=t;
    else split(t->left,l,t->left,pos,add),r=t;
    upd_sz(t);
}
void merge(pnode &t,pnode l,pnode r)
{
    if(!l || !r) t=l?l:r;
    else if(l->pri>r->pri)
        merge(l->right,l->right,r),t=l;
    else merge(r->left,l,r->left),t=r;
    upd_sz(t);
}
void insert(int val)
{
    merge(root,root,new node(val));
}
void query2(int l,int r)
{
    pnode temp1=NULL,temp2=NULL,temp3=NULL,temp4=NULL;
    split(root,temp1,temp2,r);
    split(temp1,temp3,temp4,l-1);
    merge(root,temp3,temp2);
    merge(root,root,temp4);
}
void query1(int l,int r)
{
    pnode temp1=NULL,temp2=NULL,temp3=NULL,temp4=NULL;
    split(root,temp1,temp2,r,0);
    split(temp1,temp3,temp4,l-1,0);
    merge(root,temp3,temp2);
    merge(root,temp4,root);
}
void inorder(pnode tree)
{
    if(tree)
    {
        inorder(tree->left);
        printf("%d ",tree->val);
        inorder(tree->right);
    }
}
int getmin(pnode tree)
{
    if(tree->left){
        return getmin(tree->left);
    }
    return tree->val;
}
int getmax(pnode tree)
{
    if(tree->right){
        return getmax(tree->right);
    }
    return tree->val;
}
int n,m,x,ty,l,r;
int main()
{
    scanf("%d %d",&n,&m);
    for(int i=0;i<n;i++){
        scanf("%d",&x);
        insert(x);
    }
    while(m--){
        scanf("%d %d %d",&ty,&l,&r);
        if(ty==1){
            query1(l,r);
        }
        else
            query2(l,r);
    }
    printf("%d\n",abs(getmax(root)-getmin(root)));
    inorder(root);
    return 0;
}


3)	 MEDIAN UPDATE 


#include<bits/stdc++.h>

using namespace std;


void median(vector<char> V, vector<long int> X){
    multiset<long int> rightMedian; //min heap
    multiset <long int, greater <long int> > leftMedian; //max heap
    double median;
    int flag;
    int i=0;
    for(;i<V.size();i++){
        if(V[i]=='a'){
            rightMedian.insert(X[i]);
            median=X[i];
            if(leftMedian.size()+rightMedian.size()==0){
                cout<<"Wrong!"<<endl;
            }
            else{
                if(ceil(median)!=median){
                    cout<<fixed<<setprecision(1)<<median<<endl;
                }
                else{
                    cout<<fixed<<setprecision(0)<<median<<endl;
                }
            }
            i++;
            break;
        }
        else{
            cout<<"Wrong!"<<endl;
        }
    }
    for(;i<V.size();i++){
        flag = 1;
        if(V[i]=='a'){
            if(signed(rightMedian.size()-leftMedian.size())==1){
                if(X[i]<median){
                    leftMedian.insert(X[i]);
                }
                else if(X[i]>=median){
                    int temp = *(rightMedian.begin());
                    rightMedian.erase(rightMedian.begin());
                    rightMedian.insert(X[i]);
                    leftMedian.insert(temp);
                }
            }

            else if(signed(rightMedian.size()-leftMedian.size())==0){
                if(X[i]>=median){
                    rightMedian.insert(X[i]);
                }
                else if(X[i]<median){
                    leftMedian.insert(X[i]);
                    int temp = *(leftMedian.begin());
                    rightMedian.insert(temp);
                    leftMedian.erase(leftMedian.begin());
                }

            }

            else{
                rightMedian.insert(X[i]);
            }
        }


        else if(V[i]=='r'){
            if(leftMedian.count(X[i]) || rightMedian.count(X[i])){
                if(leftMedian.count(X[i])){
                    leftMedian.erase(leftMedian.find(X[i]));
                }
                else if(rightMedian.count(X[i])){
                    rightMedian.erase(rightMedian.find(X[i]));
                }
            }
            else{
                flag = -1;
            }

        }

        // auto balancing after removal is done
        if(signed(rightMedian.size()-leftMedian.size())>1 || signed(rightMedian.size()-leftMedian.size())<0){
            if(signed(rightMedian.size()-leftMedian.size())>1){
                int temp = *(rightMedian.begin());
                rightMedian.erase(rightMedian.begin());
                leftMedian.insert(temp);
            }
            else{
                int temp = *(leftMedian.begin());
                leftMedian.erase(leftMedian.begin());
                rightMedian.insert(temp);

            }
        }

        if(flag == -1){
            cout<<"Wrong!"<<endl;
            flag = 1;
        }
        else if((leftMedian.size()+rightMedian.size())%2==0 && leftMedian.size()+rightMedian.size()!=0){
            median = (*(leftMedian.begin()) + *(rightMedian.begin()))/2.0;
            if(ceil(median)!=median){
                cout<<fixed<<setprecision(1)<<median<<endl;
            }
            else{
                cout<<fixed<<setprecision(0)<<median<<endl;
            }
        }
        else if(leftMedian.size()+rightMedian.size()==0){
            cout<<"Wrong!"<<endl;
        }
        else{
            median = *(rightMedian.begin());
            if(ceil(median)!=median){
                cout<<fixed<<setprecision(1)<<median<<endl;
            }
            else{
                cout<<fixed<<setprecision(0)<<median<<endl;
            }
        }
    }
}

int main(){
    long int N;
    cin>>N;
    vector<char> s;
    vector<long int> X;
	char temp;
    int tempint;
	for(int i = 0; i < N; i++){
		cin >> temp >> tempint;
        s.push_back(temp);
        X.push_back(tempint);
	}
	median(s,X);
	return 0;
}

