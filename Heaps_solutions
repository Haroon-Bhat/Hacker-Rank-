1)	Jessie and cookies 

#include <bits/stdc++.h>

using namespace std;

vector<string> split_string(string);

/*
 * Complete the cookies function below.
 */
int main() {
    int n,k;
    cin >> n >> k;
    
    // enter values
    priority_queue <int,vector<int>,greater<int>> q;
    for (int i=0;i<n;i++) {
        int x;
        cin >> x;
        q.push(x);
    }
    
    // process
    int count=0;
    while(true){
        int x;
        if ((x=q.top())<k) {
            q.pop(); // remove 1st
            if (q.empty()) { // nothing left, can't proceed
                cout << -1;
                break;
            }
            int y=2*q.top(); 
            q.pop(); // remove 2nd
            q.push(x+y); // create new
            count++; // completed 1 op
        }
        else {
            cout << count; // print ans
            break;
        }
    }
        
    return 0;
}


2)QHEAP1

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

priority_queue<int, vector<int>, greater<int> > pq;
priority_queue<int, vector<int>, greater<int> > pqRemove;

void add(){
    int n;
    cin>>n;
    pq.push(n);
}

void remove()
{
    int n;
    cin>>n;
    pqRemove.push(n);
    
}

void printMin(){
    
    while(!pqRemove.empty() && pqRemove.top() == pq.top()){
        pq.pop();
        pqRemove.pop();
    }
    cout<<pq.top()<<endl;
}
    
int main() {

    int q;
    cin>>q;
    while(q!=0){
        int command;
        cin>>command;
        if(command == 1)
            add();
        else if(command == 2)
            remove();
        else if(command == 3)
            printMin();
        
        q--;
    }
    return 0;
}

3)FIND THE RUNNING MEDIAN 

vector<double> runningMedian(vector<int> a) {
        vector<double> res;
        priority_queue<int, vector<int>, greater<int>> minheap;
        priority_queue<int> maxheap;

        double median = 0;

        for (int i=0; i<a.size(); i++) {
                if (a[i] <= median) {
                        maxheap.push(a[i]);
                } else {
                        minheap.push(a[i]);
                }

                if (minheap.size() > maxheap.size()+1) {
                        maxheap.push(minheap.top());
                        minheap.pop();
                }
                if (maxheap.size() > minheap.size()+1) {
                        minheap.push(maxheap.top());
                        maxheap.pop();
                }

                if (minheap.size() == maxheap.size()) {
                        median = (maxheap.top() + minheap.top())/2.0;
                } else if(minheap.size() > maxheap.size()) {
                        median = (double)minheap.top();
                } else if (minheap.size() < maxheap.size()) {
                        median = (double)maxheap.top();
                }
                res.push_back(median);
        }
        return res;
}

4)  MINIMUM AVERAGE WAITING TIME 

import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

 public class MinimumAverageWaitingTime {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int numOfCustomers = in.nextInt();
        Customer[] customers = new Customer[numOfCustomers];

        for (int i = 0; i < numOfCustomers; i++) {
            int orderTime = in.nextInt();
            int cookTime = in.nextInt();
            customers[i] = new Customer(orderTime, cookTime);
        }
        in.close();

        Arrays.sort(customers, Comparator.comparingInt(o -> o.orderTime));

        Queue<Customer> waitTime = new PriorityQueue<>();
        long currentTime = 0L;
        long totalWaitTime = 0L;
        int index = 0;

        while (!waitTime.isEmpty() || index < customers.length) {
            while (index < customers.length && customers[index].orderTime <= currentTime) {
                waitTime.add(customers[index]);
                index++;
            }
            if (waitTime.isEmpty()) {
                currentTime = customers[index].orderTime;
                continue;
            }

            Customer served = waitTime.poll();
            currentTime += served.cookTime;
            totalWaitTime += currentTime - served.orderTime;
        }

        System.out.println(totalWaitTime / customers.length);
    }

    static class Customer implements Comparable<Customer> {
        int orderTime;
        int cookTime;

        public Customer(int orderTime, int cookTime) {
            this.orderTime = orderTime;
            this.cookTime = cookTime;
        }

        @Override
        public int compareTo(Customer o) {
            if (this.cookTime > o.cookTime) {
                return this.orderTime;
            } else
                return -1;
        }
    }
}

